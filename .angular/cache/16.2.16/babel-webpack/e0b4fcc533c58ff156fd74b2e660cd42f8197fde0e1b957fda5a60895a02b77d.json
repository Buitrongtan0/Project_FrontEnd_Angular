{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/user.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"../../password-input/password-input.component\";\nconst _c0 = function (a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\nexport class LoginPageComponent {\n  constructor(fb, userService, router) {\n    this.fb = fb;\n    this.userService = userService;\n    this.router = router;\n    this.passwordHidden = true;\n  }\n  ngOnInit() {\n    this.createLoginForm();\n  }\n  createLoginForm() {\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required]\n    });\n  }\n  login() {\n    if (!this.loginForm.valid) {\n      return;\n    }\n    let loginModel = {\n      ...this.loginForm.value\n    };\n    this.userService.getLogin(loginModel).subscribe(response => {\n      if (response.errCode === 0) {}\n      // this.localStorageService.set('tokenModel', response.data);\n      // this.getUserDetailByEmail(this.loginForm.get('email')?.value);\n      // this.toastrService.info(response.message);\n      this.router.navigateByUrl('');\n    }, errorResponse => {\n      // this.toastrService.error(errorResponse.error)\n    });\n  }\n  getUserDetailByEmail(mail) {\n    // this.userService.getUserDetailByEmail(mail).subscribe((response) => {\n    //   this.authService.setUserDetail(response.data);\n    // });\n  }\n  togglePasswordHidden() {\n    this.passwordHidden = !this.passwordHidden;\n  }\n  isPasswordHidden() {\n    return this.passwordHidden ? 'password' : 'text';\n  }\n  isPasswordHiddenIcon() {\n    return this.passwordHidden ? 'fa-eye-slash' : 'fa-eye text-primary';\n  }\n  static {\n    this.ɵfac = function LoginPageComponent_Factory(t) {\n      return new (t || LoginPageComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.UserService), i0.ɵɵdirectiveInject(i3.Router));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: LoginPageComponent,\n      selectors: [[\"app-login-page\"]],\n      decls: 25,\n      vars: 7,\n      consts: [[1, \"container\"], [1, \"row\"], [1, \"col-md\", \"my-auto\"], [1, \"fw-bold\", \"mb-5\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [\"for\", \"email-input\", 1, \"form-label\"], [1, \"input-group\", \"has-validation\"], [\"formControlName\", \"email\", \"type\", \"email\", \"id\", \"email-input\", \"placeholder\", \"name@example.com\", 1, \"form-control\", 3, \"ngClass\"], [1, \"invalid-feedback\"], [\"formControlName\", \"password\", 3, \"errors\", \"touched\", \"dirty\"], [1, \"btn\", \"btn-primary\", \"btn-lg\", \"rounded-1\", \"shadow-xl\", \"w-100\", 3, \"click\"], [1, \"d-flex\", \"mt-5\"], [1, \"my-auto\", \"text-secondary\", \"me-2\"], [\"routerLink\", \"/signup\", 1, \"btn\", \"btn-outline-success\", \"rounded-3\"], [1, \"col-md\", \"d-none\", \"d-md-block\", \"my-auto\"], [1, \"display-6\", \"fw-light\", \"text-secondary\", \"text-center\", \"mb-5\"]],\n      template: function LoginPageComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h1\", 3);\n          i0.ɵɵtext(4, \"Log in\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"form\", 4);\n          i0.ɵɵlistener(\"ngSubmit\", function LoginPageComponent_Template_form_ngSubmit_5_listener() {\n            return ctx.login();\n          });\n          i0.ɵɵelementStart(6, \"div\", 5)(7, \"label\", 6);\n          i0.ɵɵtext(8, \"Enter your email address\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"div\", 7);\n          i0.ɵɵelement(10, \"input\", 8);\n          i0.ɵɵelementStart(11, \"div\", 9);\n          i0.ɵɵtext(12, \"Please enter your email.\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(13, \"div\", 5);\n          i0.ɵɵelement(14, \"app-password-input\", 10);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(15, \"button\", 11);\n          i0.ɵɵlistener(\"click\", function LoginPageComponent_Template_button_click_15_listener() {\n            return ctx.login();\n          });\n          i0.ɵɵtext(16, \" Log in \");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(17, \"div\", 12)(18, \"p\", 13);\n          i0.ɵɵtext(19, \"If you are not signed up yet\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(20, \"a\", 14);\n          i0.ɵɵtext(21, \"Sign up now\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(22, \"div\", 15)(23, \"h1\", 16);\n          i0.ɵɵtext(24, \" Nice to see you again \");\n          i0.ɵɵelementEnd()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(5, _c0, ctx.loginForm.controls[\"email\"].errors && (ctx.loginForm.controls[\"email\"].touched || ctx.loginForm.controls[\"email\"].dirty)));\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"errors\", ctx.loginForm.controls[\"password\"].errors)(\"touched\", ctx.loginForm.controls[\"password\"].touched)(\"dirty\", ctx.loginForm.controls[\"password\"].dirty);\n        }\n      },\n      dependencies: [i4.NgClass, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i3.RouterLink, i5.PasswordInputComponent],\n      styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["Validators","LoginPageComponent","constructor","fb","userService","router","passwordHidden","ngOnInit","createLoginForm","loginForm","group","email","required","password","login","valid","loginModel","value","getLogin","subscribe","response","errCode","navigateByUrl","errorResponse","getUserDetailByEmail","mail","togglePasswordHidden","isPasswordHidden","isPasswordHiddenIcon","i0","ɵɵdirectiveInject","i1","FormBuilder","i2","UserService","i3","Router","selectors","decls","vars","consts","template","LoginPageComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","LoginPageComponent_Template_form_ngSubmit_5_listener","ɵɵelement","LoginPageComponent_Template_button_click_15_listener","ɵɵadvance","ɵɵproperty","ɵɵpureFunction1","_c0","controls","errors","touched","dirty"],"sources":["D:\\Anguilar\\project-website\\src\\app\\components\\page\\login-page\\login-page.component.ts","D:\\Anguilar\\project-website\\src\\app\\components\\page\\login-page\\login-page.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { User } from 'src/app/models/user';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-login-page',\n  templateUrl: './login-page.component.html',\n  styleUrls: ['./login-page.component.scss']\n})\nexport class LoginPageComponent {\n  loginForm!: FormGroup;\n\n  passwordHidden: boolean = true;\n  \n  constructor(private fb: FormBuilder, private userService: UserService, private router: Router, ){}\n\n  ngOnInit(): void {\n    this.createLoginForm();\n  }\n\n  createLoginForm() {\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required]\n    });\n  }\n\n  login() {\n    if (!this.loginForm.valid) {\n      return;\n    }\n    let loginModel: User = { ...this.loginForm.value };\n\n    this.userService.getLogin(loginModel).subscribe(\n      (response) => {\n        if (response.errCode === 0) {\n        }\n        // this.localStorageService.set('tokenModel', response.data);\n     \n        // this.getUserDetailByEmail(this.loginForm.get('email')?.value);\n        // this.toastrService.info(response.message);\n        this.router.navigateByUrl('');\n      },\n      (errorResponse) => {\n        // this.toastrService.error(errorResponse.error)\n      } \n    );\n  }\n\n  getUserDetailByEmail(mail: string) {\n    // this.userService.getUserDetailByEmail(mail).subscribe((response) => {\n    //   this.authService.setUserDetail(response.data);\n    // });\n  }\n\n  togglePasswordHidden() {\n    this.passwordHidden = !this.passwordHidden;\n  }\n\n  isPasswordHidden(): string {\n    return this.passwordHidden ? 'password' : 'text';\n  }\n\n  isPasswordHiddenIcon(): string {\n    return this.passwordHidden ? 'fa-eye-slash' : 'fa-eye text-primary';\n  }\n}\n","<div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-md my-auto\">\n        <h1 class=\"fw-bold mb-5\">Log in</h1>\n        <form [formGroup]=\"loginForm\" (ngSubmit)=\"login()\">\n          <div class=\"mb-3\">\n            <label for=\"email-input\" class=\"form-label\"\n              >Enter your email address</label\n            >\n            <div class=\"input-group has-validation\">\n              <input\n                formControlName=\"email\"\n                type=\"email\"\n                class=\"form-control\"\n                [ngClass]=\"{\n                  'is-invalid':\n                    loginForm.controls['email'].errors &&\n                    (loginForm.controls['email'].touched ||\n                      loginForm.controls['email'].dirty)\n                }\"\n                id=\"email-input\"\n                placeholder=\"name@example.com\"\n              />\n              <div class=\"invalid-feedback\">Please enter your email.</div>\n            </div>\n          </div>\n  \n          <div class=\"mb-3\">\n            <app-password-input\n              formControlName=\"password\"\n              [errors]=\"loginForm.controls['password'].errors\"\n              [touched]=\"loginForm.controls['password'].touched\"\n              [dirty]=\"loginForm.controls['password'].dirty\"\n            ></app-password-input>\n          </div>\n  \n          <button\n            (click)=\"login()\"\n            class=\"btn btn-primary btn-lg rounded-1 shadow-xl w-100\"\n          >\n            Log in\n          </button>\n        </form>\n  \n        <div class=\"d-flex mt-5\">\n          <p class=\"my-auto text-secondary me-2\">If you are not signed up yet</p>\n          <a routerLink=\"/signup\" class=\"btn btn-outline-success rounded-3\"\n            >Sign up now</a\n          >\n        </div>\n      </div>\n  \n      <div class=\"col-md d-none d-md-block my-auto\">\n        <h1 class=\"display-6 fw-light text-secondary text-center mb-5\">\n          Nice to see you again\n        </h1>\n        <!-- <img\n          id=\"car-image\"\n          class=\"img-fluid\"\n          src=\"../../../../assets/images/white-car-2.png\"\n        /> -->\n\n      </div>\n    </div>\n  </div>\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}