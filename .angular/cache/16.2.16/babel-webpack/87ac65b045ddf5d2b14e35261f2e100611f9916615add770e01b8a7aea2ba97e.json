{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nconst _c0 = function (a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\nexport let PasswordInputComponent = /*#__PURE__*/(() => {\n  class PasswordInputComponent {\n    constructor() {\n      this.id = 'password-input';\n      this.label = 'Enter your password';\n      this.invalidFeedback = 'Please enter your password.';\n      this.passwordHidden = true;\n      this.value = '';\n      this.onChange = () => {};\n      this.onTouched = () => {};\n    }\n    ngOnInit() {}\n    writeValue(value) {\n      this.value = value;\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    togglePasswordHidden() {\n      this.passwordHidden = !this.passwordHidden;\n    }\n    isPasswordHidden() {\n      return this.passwordHidden ? 'password' : 'text';\n    }\n    isPasswordHiddenIcon() {\n      return this.passwordHidden ? 'fa-eye-slash' : 'fa-eye text-primary';\n    }\n    static {\n      this.ɵfac = function PasswordInputComponent_Factory(t) {\n        return new (t || PasswordInputComponent)();\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: PasswordInputComponent,\n        selectors: [[\"app-password-input\"]],\n        hostBindings: function PasswordInputComponent_HostBindings(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵlistener(\"change\", function PasswordInputComponent_change_HostBindingHandler($event) {\n              return ctx.onChange($event.target.value);\n            })(\"input\", function PasswordInputComponent_input_HostBindingHandler($event) {\n              return ctx.onChange($event.target.value);\n            })(\"blur\", function PasswordInputComponent_blur_HostBindingHandler() {\n              return ctx.onTouched();\n            });\n          }\n        },\n        inputs: {\n          id: \"id\",\n          label: \"label\",\n          invalidFeedback: \"invalidFeedback\",\n          errors: \"errors\",\n          touched: \"touched\",\n          dirty: \"dirty\"\n        },\n        features: [i0.ɵɵProvidersFeature([{\n          provide: NG_VALUE_ACCESSOR,\n          useExisting: forwardRef(() => PasswordInputComponent),\n          multi: true\n        }])],\n        decls: 8,\n        vars: 11,\n        consts: [[1, \"form-label\", 3, \"for\"], [1, \"input-group\", \"has-validation\"], [\"placeholder\", \"***********\", 1, \"form-control\", 3, \"type\", \"id\", \"ngClass\"], [1, \"input-group-text\", \"cursor-pointer\", 3, \"click\"], [\"aria-hidden\", \"true\"], [1, \"invalid-feedback\"]],\n        template: function PasswordInputComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"label\", 0);\n            i0.ɵɵtext(1);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(2, \"div\", 1);\n            i0.ɵɵelement(3, \"input\", 2);\n            i0.ɵɵelementStart(4, \"div\", 3);\n            i0.ɵɵlistener(\"click\", function PasswordInputComponent_Template_div_click_4_listener() {\n              return ctx.togglePasswordHidden();\n            });\n            i0.ɵɵelement(5, \"i\", 4);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(6, \"div\", 5);\n            i0.ɵɵtext(7);\n            i0.ɵɵelementEnd()();\n          }\n          if (rf & 2) {\n            i0.ɵɵproperty(\"for\", ctx.id);\n            i0.ɵɵadvance(1);\n            i0.ɵɵtextInterpolate(ctx.label);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"type\", ctx.isPasswordHidden())(\"id\", ctx.id)(\"ngClass\", i0.ɵɵpureFunction1(9, _c0, ctx.errors && (ctx.touched || ctx.dirty)));\n            i0.ɵɵadvance(2);\n            i0.ɵɵclassMapInterpolate1(\"fa \", ctx.isPasswordHiddenIcon(), \"\");\n            i0.ɵɵadvance(2);\n            i0.ɵɵtextInterpolate(ctx.invalidFeedback);\n          }\n        },\n        dependencies: [i1.NgClass]\n      });\n    }\n  }\n  return PasswordInputComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}